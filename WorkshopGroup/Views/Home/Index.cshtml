@using WorkshopGroup.ViewModels;
@model HomeViewModel

@{
  ViewData["Title"] = "Home Page";
}

<div ng-controller="myController">
    <!-- Your AngularJS code and bindings here -->
</div>

<WorkshopGroup>Loading AppComponent content here ...</WorkshopGroup>

<section class="bg-dark space-lg" data-jarallax data-speed="0.2">
    <img alt="Image" src="/img/photo-road.jpg" class="bg-image position-absolute opacity-20" />
    <div class="container">
        <div class="row align-items-center justify-content-between">
            <div class="col-12 col-md-6 col-lg-5 section-intro">
                <h1 class="display-3">Find a hobby group</h1>
                <span class="lead">
                    Build your Kingdom, Develop Skills, Complete Quests, and Form Real-Life, local Alliances and peer to peer networks.
                    Automate trade, data capturing, and otherwise augment the DIGITAL reality from the physical reality; not the other way around.
                </span>
            </div>
            <!--end of col-->
            <div class="col-12 col-md-6 col-lg-5">
                <div class="card">
                    <div class="card-body">
                        <form asp-action="Index">
                            <div class="form-group">
                                <label asp-for="Register.UserName">Username</label>
                                <input asp-for="Register.UserName" type="text" class="form-control form-control-lg" placeholder="Pick a username">
                                <span asp-validation-for="Register.UserName" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Register.Email">Email address</label>
                                <input asp-for="Register.Email" type="email" class="form-control form-control-lg" placeholder="Enter email">
                                <span asp-validation-for="Register.Email" class="text-danger"></span>
                                <small id="emailHelp" class="form-text">We'll never share your email with anyone else.</small>
                            </div>
                            <div class="form-group">
                                <label asp-for="Register.Password">Password</label>
                                <input asp-for="Register.Password" type="password" class="form-control form-control-lg" placeholder="Password">
                                <span asp-validation-for="Register.Password" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Register.ZipCode">Zip Code</label>
                                <input asp-for="Register.ZipCode" type="text" list="datlistOptions" id="registerLocation" class="form-control form-control-lg" placeholder="&#xf041">
                                <div id="datalistOptions">
                                </div>
                                <span asp-validation-for="Register.ZipCode" class="text-danger"></span>
                            </div>
              @*                            <div class="mb-3">
                            <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" value="agree" name="agree-terms" id="check-agree">
                            <label class="custom-control-label text-small" for="check-agree">
                            I agree to the <a href="#">Terms &amp; Conditions</a>
                            </label>
                            </div>
                            </div>
                            *@
                            <button type="submit" class="btn btn-lg btn-success btn-block">Sign up for Hobby Groups</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <!--end of row-->
    </div>
    <!--end of container-->
</section>
<!--end of section-->
<section>
    <div class="container">
    @if (Model.Clubs == null)
    {
          <h1 class="fw-light">
              There are no running clubs in your area! <a asp-area="" asp-controller="Account"
                                                        asp-action="Login">Login</a> and create one!
          </h1>
    }
    else
    {
          <div class="row justify-content-between mb-5">
              <div class="col-auto">
                  <h3>Running clubs near @Model.City, @Model.State</h3>
              </div>
              <!--end of col-->
              <div class="col-auto">
                  <a href="#" class="btn btn-outline-primary">View all</a>
              </div>
              <!--end of col-->
          </div>
          <ul class="row feature-list feature-list-sm">
        @foreach (var item in Model.Clubs)
        {
                <li class="col-12 col-md-6 col-lg-4">
                    <div class="card">
                        <a href="#">
                            <img class="card-img-top" src="@item.Image" alt="Card image cap">
                        </a>
                        <div class="card-body">
                            <a href="#">
                                <h4 class="card-title">@item.Title</h4>
                                <p class="card-text text-body">@item.Description</p>
                            </a>
                        </div>
                        <div class="card-footer card-footer-borderless d-flex justify-content-between">
                            <div class="text-small">
                                <ul class="list-inline">
                                    <li class="list-inline-item"><i class="icon-heart"></i> 221</li>
                                    <li class="list-inline-item"><i class="icon-message"></i> 14</li>
                                </ul>
                            </div>
                            <div class="dropup">
                                <a type="btn btn-success" asp-controller="Project" asp-action="Detail" asp-route-id="@item.Id"
                               class="btn btn-sm btn-outline-secondary">View</a>
                                <div class="dropdown-menu dropdown-menu-sm" aria-labelledby="SidekickButton">
                                    <a class="dropdown-item" href="#">Save</a>
                                    <a class="dropdown-item" href="#">Share</a>
                                    <a class="dropdown-item" href="#">Comment</a>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" href="#">Report</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </li>
        }
          </ul>
    }
        <!--end of row-->
    </div>
    <!--end of container-->
</section>
@section scripts
  {
  <script>
      $('form').submit(function (event) {
          event.preventDefault();
          var formData = $(this).serialize();

          // Show the loading spinner
          $('#loading-spinner').show();

          $.ajax({
              type: 'POST',
              url: '/Home/Index',
              data: formData,
              success: function (data) {
                  console.log(data);
                  $('#results').html(data);
                  // Hide the loading spinner
                  $('#loading-spinner').hide();
              }
          });
      });

      $.getJSON("https://gist.githubusercontent.com/tdreyno/4278655/raw/7b0762c09b519f40397e4c3e100b097d861f5588/airports.json", function (data) {
          let airports = [];
          $.each(data, function (data, name) {
              airports.push(name.name);
          });
          autocomplete(document.getElementById("Origin"), airports);
          autocomplete(document.getElementById("Destination"), airports);
      });


      function autocomplete(inp, arr) {
          /*the autocomplete function takes two arguments,
          the text field element and an array of possible autocompleted values:*/
          var currentFocus;
          /*execute a function when someone writes in the text field:*/
          inp.addEventListener("input", function (e) {
              var a, b, i, val = this.value;
              /*close any already open lists of autocompleted values*/
              closeAllLists();
              if (!val) { return false; }
              currentFocus = -1;
              /*create a DIV element that will contain the items (values):*/
              a = document.createElement("DIV");
              a.setAttribute("id", this.id + "autocomplete-list");
              a.setAttribute("class", "autocomplete-items");
              /*append the DIV element as a child of the autocomplete container:*/
              this.parentNode.appendChild(a);
              /*for each item in the array...*/
              for (i = 0; i < arr.length; i++) {
                  /*check if the item starts with the same letters as the text field value:*/
                  if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                      /*create a DIV element for each matching element:*/
                      b = document.createElement("DIV");
                      /*make the matching letters bold:*/
                      b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                      b.innerHTML += arr[i].substr(val.length);
                      /*insert a input field that will hold the current array item's value:*/
                      b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                      /*execute a function when someone clicks on the item value (DIV element):*/
                      b.addEventListener("click", function (e) {
                          /*insert the value for the autocomplete text field:*/
                          inp.value = this.getElementsByTagName("input")[0].value;
                          /*close the list of autocompleted values,
                          (or any other open lists of autocompleted values:*/
                          closeAllLists();
                      });
                      a.appendChild(b);
                  }
              }
          });
          /*execute a function presses a key on the keyboard:*/
          inp.addEventListener("keydown", function (e) {
              var x = document.getElementById(this.id + "autocomplete-list");
              if (x) x = x.getElementsByTagName("div");
              if (e.keyCode == 40) {
                  /*If the arrow DOWN key is pressed,
                  increase the currentFocus variable:*/
                  currentFocus++;
                  /*and and make the current item more visible:*/
                  addActive(x);
              } else if (e.keyCode == 38) { //up
                  /*If the arrow UP key is pressed,
                  decrease the currentFocus variable:*/
                  currentFocus--;
                  /*and and make the current item more visible:*/
                  addActive(x);
              } else if (e.keyCode == 13) {
                  /*If the ENTER key is pressed, prevent the form from being submitted,*/
                  e.preventDefault();
                  if (currentFocus > -1) {
                      /*and simulate a click on the "active" item:*/
                      if (x) x[currentFocus].click();
                  }
              }
          });
          function addActive(x) {
              /*a function to classify an item as "active":*/
              if (!x) return false;
              /*start by removing the "active" class on all items:*/
              removeActive(x);
              if (currentFocus >= x.length) currentFocus = 0;
              if (currentFocus < 0) currentFocus = (x.length - 1);
              /*add class "autocomplete-active":*/
              x[currentFocus].classList.add("autocomplete-active");
          }
          function removeActive(x) {
              /*a function to remove the "active" class from all autocomplete items:*/
              for (var i = 0; i < x.length; i++) {
                  x[i].classList.remove("autocomplete-active");
              }
          }
          function closeAllLists(elmnt) {
              /*close all autocomplete lists in the document,
              except the one passed as an argument:*/
              var x = document.getElementsByClassName("autocomplete-items");
              for (var i = 0; i < x.length; i++) {
                  if (elmnt != x[i] && elmnt != inp) {
                      x[i].parentNode.removeChild(x[i]);
                  }
              }
          }
          /*execute a function when someone clicks in the document:*/
          document.addEventListener("click", function (e) {
              closeAllLists(e.target);
          });
      }
  </script>
}